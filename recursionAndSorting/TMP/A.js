/*
## ID: 90588271

## ПРИНЦИП РАБОТЫ

Я реализовала алгоритм поиска, который использует два указателя. Функция 
brokenSearch принимает на вход массив и искомый элемент. Дальше, делим массив 
пополам и сравниваем участки слева и справа. Если один из получившихся участов 
отсортирован, проверяем принадлежит ли ему искомый элемент. Если элемент 
принадлежит отсортированному участку, отбрасываем противоположный. Если 
элемент не принадлежит отсортированному участку, отбрасываем отсортированный 
участок.

## ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ

Исходный массив представляет собой кольцевой буффер с отсортированными 
данными, который сдвинут относительно иходной последовательности. Это означает, 
что выбрав случайный элемент, все элементы слева или справа окажутся 
отсортированными. Определив принадлежность отсортированному участку, можно 
отбросить левую или правую половину за О(1).

## ВРЕМЕННАЯ СЛОЖНОСТЬ

Алгоритм находит элемент за O(log n), потому что на каждой итерации мы делим 
массив пополам и изменяем только значения указателей.

## ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ

Пространственная сложность составляет O(n), так как нам нужно держать в памяти:
-   массив размера n;
-   указатели (можно откинуть).
*/
function brokenSearch(arr, k) {
    let left = 0;
    let right = arr.length - 1;

    while (left <= right) {
        const mid = Math.floor((left + right) / 2);

        if (arr[mid] === k) {
            return mid;
        }

        // все элементы [left, mid] в порядке убывания
        if (arr[mid] >= arr[left]) {
            // элемент принадлежит [left, mid)
            if (k >= arr[left] && k < arr[mid]) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        // все элементы [mid, right] в порядке возрастания
        if (arr[mid] <= arr[right]) {
            // элемент принадлежит (mid, right]
            if (k > arr[mid] && k <= arr[right]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
    }

    return -1;
}

function test() {
    const arr = [19, 21, 100, 101, 1, 4, 5, 7, 12];
    if (brokenSearch(arr, 5) !== 6) {
        console.error("WA");
    }
}
